import { auth, googleProvider } from "../config/firebase";import {  signInWithPopup,  signOut,  onAuthStateChanged,  getIdToken,} from "firebase/auth";import type { User as FirebaseAuthUser } from "firebase/auth";export interface FirebaseAuthResult {  user: FirebaseAuthUser;  token: string;  isNewUser?: boolean;}export class FirebaseAuthService {  static async signInWithGoogle(): Promise<FirebaseAuthResult> {    try {      const result = await signInWithPopup(auth, googleProvider);      const user = result.user;      if (!user.email) {        throw new Error("No email provided by Google account");      }      const token = await getIdToken(user, true);      const isNewUser =        result.operationType === "signIn" &&        user.metadata.creationTime === user.metadata.lastSignInTime;      return {        user,        token,        isNewUser,      };    } catch (error: any) {      console.error("Google sign-in error:", error);      const errorCode = error?.code || "";      switch (errorCode) {        case "auth/popup-closed-by-user":          throw new Error("Sign-in was cancelled. Please try again.");        case "auth/popup-blocked":          throw new Error(            "Pop-up was blocked by your browser. Please allow pop-ups and try again."          );        case "auth/cancelled-popup-request":          throw new Error(            "Another sign-in attempt is in progress. Please wait."          );        case "auth/network-request-failed":          throw new Error(            "Network error. Please check your internet connection and try again."          );        case "auth/internal-error":          throw new Error(            "An internal error occurred. Please try again in a moment."          );        case "auth/account-exists-with-different-credential":          throw new Error(            "An account already exists with this email using a different sign-in method."          );        case "auth/invalid-credential":          throw new Error("Invalid credentials. Please try signing in again.");        case "auth/operation-not-allowed":          throw new Error(            "Google sign-in is not enabled. Please contact support."          );        case "auth/user-disabled":          throw new Error(            "This account has been disabled. Please contact support."          );        case "auth/timeout":          throw new Error("Sign-in timed out. Please try again.");        default:          if (error.message && error.message.includes("fetch")) {            throw new Error(              "Network error. Please check your connection and try again."            );          }          throw new Error(            error.message || "Failed to sign in with Google. Please try again."          );      }    }  }  static async signOut(): Promise<void> {    try {      await signOut(auth);    } catch (error: any) {      console.error("Sign out error:", error);      throw new Error("Failed to sign out");    }  }  static async getCurrentUserToken(): Promise<string | null> {    try {      const user = auth.currentUser;      if (!user) return null;      return await getIdToken(user);    } catch (error: any) {      console.error("Get token error:", error);      return null;    }  }  static onAuthStateChanged(callback: (user: FirebaseAuthUser | null) => void) {    return onAuthStateChanged(auth, callback);  }  static getCurrentUser(): FirebaseAuthUser | null {    return auth.currentUser;  }  static mapFirebaseUserToAppUser(firebaseUser: FirebaseAuthUser) {    const nameParts = firebaseUser.displayName?.split(" ") || ["", ""];    const firstName = nameParts[0] || "";    const lastName = nameParts.slice(1).join(" ") || "";    return {      id: firebaseUser.uid,      email: firebaseUser.email || "",      profile: {        firstName,        lastName,        fullName: firebaseUser.displayName || "",        avatar: firebaseUser.photoURL || undefined,      },    };  }  static async authenticateWithBackend(    firebaseUser: FirebaseAuthUser,    token: string,    isNewUser: boolean = false  ) {    try {      const endpoint = isNewUser        ? "/api/auth/firebase-register"        : "/api/auth/firebase-login";      const userData = this.mapFirebaseUserToAppUser(firebaseUser);      const response = await fetch(        `${import.meta.env.VITE_API_URL || "http://localhost:5000"}${endpoint}`,        {          method: "POST",          headers: {            "Content-Type": "application/json",            Authorization: `Bearer ${token}`,          },          body: JSON.stringify({            firebaseUser: userData,            token,          }),        }      );      const data = await response.json();      if (!response.ok) {        throw new Error(data.message || "Backend authentication failed");      }      return data;    } catch (error: any) {      console.error("Backend authentication error:", error);      throw error;    }  }}export default FirebaseAuthService;