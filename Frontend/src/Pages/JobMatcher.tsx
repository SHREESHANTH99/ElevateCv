import React, { useState, useEffect } from "react";import {  Target,  TrendingUp,  AlertCircle,  CheckCircle,  FileText,} from "lucide-react";const API_BASE_URL = "http://localhost:5000/api";interface Resume {  _id: string;  title: string;  updatedAt: string;  createdAt: string;}class JobMatcherAPI {  private static getAuthHeaders() {    const token = localStorage.getItem("authToken");    return {      "Content-Type": "application/json",      ...(token && { Authorization: `Bearer ${token}` }),    };  }  static async getResumes(): Promise<Resume[]> {    try {      const response = await fetch(`${API_BASE_URL}/resume`, {        headers: this.getAuthHeaders(),      });      if (!response.ok) {        throw new Error("Failed to load resumes");      }      const data = await response.json();      return data.resumes || [];    } catch (error) {      console.error("Error loading resumes:", error);      return [];    }  }  static async analyzeJobMatch(resumeId: string, jobDescription: string) {    try {      const response = await fetch(`${API_BASE_URL}/ai/suggestions`, {        method: "POST",        headers: this.getAuthHeaders(),        body: JSON.stringify({          resumeId,          jobDescription,        }),      });      if (!response.ok) {        throw new Error("Failed to analyze job match");      }      return await response.json();    } catch (error) {      console.error("Error analyzing job match:", error);      return this.performLocalAnalysis(jobDescription);    }  }  static async optimizeResume(resumeId: string, jobDescription: string) {    const response = await fetch(`${API_BASE_URL}/ai/optimize`, {      method: "POST",      headers: this.getAuthHeaders(),      body: JSON.stringify({        resumeId,        jobDescription,      }),    });    if (!response.ok) {      throw new Error("Failed to optimize resume");    }    return await response.json();  }  static performLocalAnalysis(jobDescription: string) {    const jobKeywords = jobDescription      .toLowerCase()      .replace(/[^\w\s]/g, " ")      .split(/\s+/)      .filter((word) => word.length > 3)      .filter(        (word) =>          ![            "the",            "and",            "or",            "but",            "in",            "on",            "at",            "to",            "for",            "of",            "with",            "by",            "a",            "an",            "is",            "are",            "was",            "were",            "be",            "been",            "have",            "has",            "had",            "do",            "does",            "did",            "will",            "would",            "could",            "should",          ].includes(word)      );    const commonTechKeywords = [      "javascript",      "react",      "nodejs",      "python",      "java",      "typescript",      "aws",      "docker",      "kubernetes",      "git",      "sql",      "mongodb",      "postgresql",      "html",      "css",      "angular",      "vue",      "express",      "django",      "flask",      "spring",      "bootstrap",      "tailwind",      "redux",      "graphql",      "rest",      "api",      "microservices",      "agile",      "scrum",      "devops",      "ci",      "cd",      "testing",      "jest",      "cypress",      "selenium",    ];    const presentKeywords = jobKeywords.filter((keyword) =>      commonTechKeywords.includes(keyword)    );    const missingKeywords = commonTechKeywords      .filter(        (keyword) =>          jobKeywords.includes(keyword) && !presentKeywords.includes(keyword)      )      .slice(0, 8);    const matchScore = Math.min(      Math.round((presentKeywords.length / jobKeywords.length) * 100),      95    );    return {      matchScore,      missingKeywords: missingKeywords.slice(0, 6),      presentKeywords: presentKeywords.slice(0, 8),      suggestions: [        "Add missing technical skills to your skills section",        "Include relevant projects that demonstrate these technologies",        "Mention specific tools and frameworks you've used",        "Quantify your experience with metrics and achievements",        "Tailor your summary to match the job requirements",        "Highlight relevant certifications or training",      ],      sectionScores: {        skills: Math.min(matchScore + 10, 95),        experience: Math.min(matchScore - 5, 90),        education: Math.min(matchScore + 5, 85),        keywords: matchScore,      },    };  }}const JobMatcher: React.FC = () => {  const [jobDescription, setJobDescription] = useState("");  const [selectedResume, setSelectedResume] = useState("");  const [analysis, setAnalysis] = useState<any>(null);  const [loading, setLoading] = useState(false);  const [resumes, setResumes] = useState<Resume[]>([]);  const [loadingResumes, setLoadingResumes] = useState(true);  const [error, setError] = useState<string | null>(null);  const handleAnalyze = async () => {    if (!jobDescription || !selectedResume) {      alert("Please select a resume and paste a job description");      return;    }    setLoading(true);    try {      const result = await JobMatcherAPI.analyzeJobMatch(        selectedResume,        jobDescription      );      setAnalysis(result);    } catch (error) {      console.error("Analysis error:", error);      alert("Failed to analyze job match. Please try again.");    } finally {      setLoading(false);    }  };  useEffect(() => {    const loadResumes = async () => {      setLoadingResumes(true);      try {        const fetchedResumes = await JobMatcherAPI.getResumes();        setResumes(fetchedResumes);        setError(null);      } catch (err) {        setError("Failed to load resumes");      } finally {        setLoadingResumes(false);      }    };    loadResumes();  }, []);  return (    <div className="container mx-auto px-4 py-8 max-w-5xl">      <h1 className="text-3xl font-bold mb-6 text-gray-800">        Job Match Analyzer      </h1>      <div className="bg-white rounded-lg shadow-md p-6 mb-8">        <div className="flex flex-col md:flex-row gap-6">          <div className="w-full md:w-1/2">            <h2 className="text-xl font-semibold mb-4 flex items-center">              <FileText className="mr-2 text-blue-600" size={20} />              Select Resume            </h2>            {loadingResumes ? (              <div className="text-center py-4">Loading your resumes...</div>            ) : error ? (              <div className="text-red-500 py-4">{error}</div>            ) : resumes.length === 0 ? (              <div className="text-center py-4">                <p className="mb-4">No resumes found. Create a resume first.</p>                <a                  href="/resume-builder"                  className="text-blue-600 hover:underline"                >                  Create Resume                </a>              </div>            ) : (              <div className="border rounded-md">                <select                  className="w-full p-3 border-0 focus:ring-0"                  value={selectedResume}                  onChange={(e) => setSelectedResume(e.target.value)}                >                  <option value="">Select a resume</option>                  {resumes.map((resume) => (                    <option key={resume._id} value={resume._id}>                      {resume.title} (Updated:{" "}                      {new Date(resume.updatedAt).toLocaleDateString()})                    </option>                  ))}                </select>              </div>            )}          </div>          <div className="w-full md:w-1/2">            <h2 className="text-xl font-semibold mb-4 flex items-center">              <FileText className="mr-2 text-blue-600" size={20} />              Job Description            </h2>            <textarea              className="w-full h-40 p-3 border rounded-md focus:ring-blue-500 focus:border-blue-500"              placeholder="Paste job description here..."              value={jobDescription}              onChange={(e) => setJobDescription(e.target.value)}            ></textarea>          </div>        </div>        <div className="mt-6 text-center">          <button            className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 flex items-center justify-center mx-auto"            onClick={handleAnalyze}            disabled={loading || !selectedResume || !jobDescription}          >            {loading ? (              <span>Analyzing...</span>            ) : (              <>                <Target className="mr-2" size={18} />                Analyze Match              </>            )}          </button>        </div>      </div>      {analysis && (        <div className="bg-white rounded-lg shadow-md p-6">          <h2 className="text-2xl font-bold mb-6 text-center">            Match Analysis          </h2>          <div className="flex flex-col md:flex-row gap-8">            <div className="w-full md:w-1/3">              <div className="bg-gray-50 rounded-lg p-6 text-center">                <h3 className="text-lg font-semibold mb-2">Match Score</h3>                <div className="text-5xl font-bold text-blue-600 mb-2">                  {analysis.matchScore}%                </div>                <p className="text-gray-600">                  {analysis.matchScore > 80                    ? "Excellent match!"                    : analysis.matchScore > 60                    ? "Good match"                    : "Needs improvement"}                </p>              </div>              <div className="mt-6">                <h3 className="text-lg font-semibold mb-3">Section Scores</h3>                <div className="space-y-3">                  {Object.entries(analysis.sectionScores || {}).map(                    ([section, score]) => (                      <div                        key={section}                        className="flex items-center justify-between"                      >                        <span className="capitalize">{section}</span>                        <span className="font-semibold">{score}%</span>                      </div>                    )                  )}                </div>              </div>            </div>            <div className="w-full md:w-2/3">              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">                <div>                  <h3 className="text-lg font-semibold mb-3 flex items-center">                    <CheckCircle className="mr-2 text-green-500" size={18} />                    Matching Skills                  </h3>                  <ul className="space-y-2">                    {analysis.presentKeywords?.map((keyword, index) => (                      <li key={index} className="flex items-center">                        <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>                        <span className="capitalize">{keyword}</span>                      </li>                    ))}                  </ul>                </div>                <div>                  <h3 className="text-lg font-semibold mb-3 flex items-center">                    <AlertCircle className="mr-2 text-amber-500" size={18} />                    Missing Keywords                  </h3>                  <ul className="space-y-2">                    {analysis.missingKeywords?.map((keyword, index) => (                      <li key={index} className="flex items-center">                        <span className="w-2 h-2 bg-amber-500 rounded-full mr-2"></span>                        <span className="capitalize">{keyword}</span>                      </li>                    ))}                  </ul>                </div>              </div>              <div className="mt-6">                <h3 className="text-lg font-semibold mb-3 flex items-center">                  <TrendingUp className="mr-2 text-blue-600" size={18} />                  Improvement Suggestions                </h3>                <ul className="space-y-2">                  {analysis.suggestions?.map((suggestion, index) => (                    <li key={index} className="flex items-start">                      <span className="w-2 h-2 bg-blue-600 rounded-full mr-2 mt-2"></span>                      <span>{suggestion}</span>                    </li>                  ))}                </ul>              </div>            </div>          </div>        </div>      )}    </div>  );};export default JobMatcher;