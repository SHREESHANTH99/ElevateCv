class InMemoryStorage {  constructor() {    this.users = new Map();    this.resumes = new Map();    this.nextUserId = 1;    this.nextResumeId = 1;  }  async createUser(userData) {    const user = {      _id: this.nextUserId.toString(),      email: userData.email || '',      password: userData.password || '',      profile: {        firstName: userData.profile?.firstName || '',        lastName: userData.profile?.lastName || '',        avatar: userData.profile?.avatar || '',      },      subscription: {        type: 'free',        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),      },      preferences: {        theme: 'light',        notifications: {          email: true,          push: false,        },      },      createdAt: new Date().toISOString(),      lastLogin: new Date().toISOString(),      ...userData,    };    this.users.set(user._id, user);    this.nextUserId++;    return user;  }  async findUserByEmail(email) {    for (const user of this.users.values()) {      if (user.email === email) {        return user;      }    }    return null;  }  async findUserById(id) {    return this.users.get(id) || null;  }  async updateUser(id, updateData) {    const user = this.users.get(id);    if (!user) return null;    const updatedUser = { ...user, ...updateData };    this.users.set(id, updatedUser);    return updatedUser;  }  async createResume(resumeData) {    const resume = {      _id: this.nextResumeId.toString(),      userId: resumeData.userId || '',      title: resumeData.title || 'Untitled Resume',      personalInfo: resumeData.personalInfo || {},      summary: resumeData.summary || '',      experiences: resumeData.experiences || [],      education: resumeData.education || [],      skills: resumeData.skills || [],      projects: resumeData.projects || [],      createdAt: new Date().toISOString(),      updatedAt: new Date().toISOString(),      isPublic: false,      ...resumeData,    };    this.resumes.set(resume._id, resume);    this.nextResumeId++;    return resume;  }  async findResumesByUserId(userId) {    const userResumes = [];    for (const resume of this.resumes.values()) {      if (resume.userId === userId) {        userResumes.push(resume);      }    }    return userResumes;  }  async findResumeById(id) {    return this.resumes.get(id) || null;  }  async updateResume(id, updateData) {    const resume = this.resumes.get(id);    if (!resume) return null;    const updatedResume = {       ...resume,       ...updateData,       updatedAt: new Date().toISOString()     };    this.resumes.set(id, updatedResume);    return updatedResume;  }  async deleteResume(id) {    return this.resumes.delete(id);  }  async generateToken(userId) {    return `demo-token-${userId}-${Date.now()}`;  }  async verifyToken(token) {    const parts = token.split('-');    if (parts.length >= 3 && parts[0] === 'demo' && parts[1] === 'token') {      const userId = parts[2];      return this.findUserById(userId);    }    return null;  }}const inMemoryStorage = new InMemoryStorage();module.exports = inMemoryStorage;