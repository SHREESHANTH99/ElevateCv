const mongoose = require('mongoose');const bcrypt = require('bcryptjs');const userSchema = new mongoose.Schema({  email: {    type: String,    required: [true, 'Email is required'],    unique: true,    lowercase: true,    trim: true,    match: [/^\S+@\S+\.\S+$/, 'Please enter a valid email']  },  password: {    type: String,    required: [true, 'Password is required'],    minlength: [6, 'Password must be at least 6 characters long'],    select: false  },  profile: {    firstName: {      type: String,      required: [true, 'First name is required'],      trim: true    },    lastName: {      type: String,      required: [true, 'Last name is required'],      trim: true    },    avatar: {      type: String,      default: ''    },    phone: {      type: String,      trim: true    },    address: {      street: String,      city: String,      state: String,      country: String,      zipCode: String    },    professionalTitle: String,    bio: String,    socialLinks: {      linkedin: String,      github: String,      twitter: String,      portfolio: String    }  },  subscription: {    type: {      type: String,      enum: ['free', 'pro', 'premium'],      default: 'free'    },    expiresAt: Date  },  preferences: {    theme: {      type: String,      enum: ['light', 'dark'],      default: 'light'    },    notifications: {      email: { type: Boolean, default: true },      push: { type: Boolean, default: true }    }  }}, {  timestamps: true});userSchema.pre('save', async function(next) {  if (!this.isModified('password')) {    console.log('Password not modified, skipping hash');    return next();  }  try {    console.log('Hashing new password...');    if (!this.password) {      console.error('No password provided for hashing');      return next(new Error('Password is required'));    }    console.log('Generating salt...');    const salt = await bcrypt.genSalt(12);    console.log('Hashing password with salt...');    this.password = await bcrypt.hash(this.password, salt);    console.log('Password hashed successfully');    next();  } catch (error) {    console.error('Error hashing password:', error);    next(error);  }});userSchema.methods.comparePassword = async function(candidatePassword) {  try {    if (!candidatePassword) {      console.error('No password provided for comparison');      return false;    }    if (!this.password) {      console.error('No hashed password stored for user');      return false;    }    console.log('Comparing passwords...');    console.log('Candidate password length:', candidatePassword.length);    console.log('Stored password hash length:', this.password.length);    const isMatch = await bcrypt.compare(candidatePassword, this.password);    console.log('Password match result:', isMatch);    return isMatch;  } catch (error) {    console.error('Error comparing passwords:', error);    return false;  }};userSchema.methods.toJSON = function() {  const user = this.toObject();  delete user.password;  return user;};module.exports = mongoose.model('User', userSchema);