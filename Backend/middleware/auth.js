const jwt = require("jsonwebtoken");const User = require("../models/User");const inMemoryStorage = require("../utils/inMemoryStorage.js");const auth = async (req, res, next) => {  try {    const authHeader = req.header("Authorization");    if (!authHeader) {      return res.status(401).json({ message: "No token, authorization denied" });    }    const token = authHeader.startsWith("Bearer ")      ? authHeader.split(" ")[1]      : authHeader;    if (!token) {      return res.status(401).json({ message: "Token missing or malformed" });    }    if (process.env.USE_IN_MEMORY_STORAGE === "true") {      const user = await inMemoryStorage.verifyToken(token);      if (!user) {        return res.status(401).json({ message: "Token is not valid" });      }      req.user = user;      return next();    }    if (!process.env.JWT_SECRET) {      console.error("JWT_SECRET is not defined in environment variables");      return res.status(500).json({ message: "Server configuration error" });    }    try {      const decoded = jwt.verify(token, process.env.JWT_SECRET);      const userId = decoded.userId || decoded.id;      if (!userId) {        return res.status(401).json({ message: "Invalid token format" });      }      const user = await User.findById(userId).select("-password");      if (!user) {        return res.status(401).json({ message: "User not found" });      }      req.user = user;      next();    } catch (jwtError) {      if (jwtError.name === 'TokenExpiredError') {        return res.status(401).json({ message: "Token has expired" });      } else if (jwtError.name === 'JsonWebTokenError') {        return res.status(401).json({ message: "Invalid token" });      } else {        throw jwtError;      }    }  } catch (error) {    console.error("Auth middleware error:", error);    res.status(500).json({ message: "Server error during authentication" });  }};module.exports = auth;